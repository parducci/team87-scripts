import os

# The following metrics.out file is generated by querying directly a kafka jmx exporter endpoint (https://github.com/prometheus/jmx_exporter).
# For example: curl -s <endpoint>:<port>/metrics > sample/metrics.out
METRICS_FILENAME = "sample/metrics.out"

# The following function loads a file that has two columns separated by a space and returns a dictionary
def load_file(filename):
    # Open the file
    f = open(filename, 'r')
    # Create an empty dictionary
    full_metric_list = {}
    # Read the file line by line
    for line in f:
        # if line begins with a #, skip it
        if line.startswith('#'):
            continue
        # if line doesn't begin with "kafka", skip it
        if not line.startswith('kafka'):
            continue
        # Split the line into two columns, if there are more than two columns only store as value the last column
        (key, val) = line.split(None, 1)
        # Add the key and value to the dictionary
        full_metric_list[key] = val
    # Close the file
    f.close()
    # Return the dictionary
    return full_metric_list

# The following function takes the dictionary form load_file and creates a new dictionary where they key is a substring of the original key from the string start until the first occurrence of the character '{' if it exists
def create_exporter_dict(full_metric_list):
    # Create an empty dictionary
    exporter_dict = {}
    # Loop through the dictionary
    for key in full_metric_list.keys():
        # If the key contains a '{', split the key into two columns at the first occurrence of the character '{'
        if '{' in key:
            (new_key, val) = key.split('{', 1)
        # Add the new_key to the new dictionary with the value from the original dictionary if the new_key is not in the dictionary with a value of 1, if not add 1 to the value
        if new_key not in exporter_dict:
            exporter_dict[new_key] = 1
        else:
            exporter_dict[new_key] += 1
    # Return the dictionary
    return exporter_dict

# The main function will load the file, create the two dictionaries, and print the results
def main():
    # Load the file
    full_metric_list = load_file(METRICS_FILENAME)
    # Create the two dictionaries
    exporter_dict = create_exporter_dict(full_metric_list)
    # Print the results in two columns: key,value. Sorted by value
    for key, value in sorted(exporter_dict.items(), key=lambda item: item[1], reverse=True):
        print(key, value)

# Run the main function
if __name__ == "__main__":
    main()